{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Declaraci\u00f3n de intenciones Proyecto de documentaci\u00f3n Un espacio colaborativo para la banda de Koders, con el objetivo de ayudarnos a seguir mejorando. \ud83d\udcaa\ud83c\udffb Se pretende, pero no se lim\u00edta a : Notas/apuntes (que solo Dios y quien lo escribi\u00f3 entiende) Tips (En mejora, osea lo \u00fanico que nos jalo) Pepitas de oro (Links de webs ) \ud83d\ude4c\ud83c\udffb","title":"Intenciones"},{"location":"#declaracion-de-intenciones","text":"","title":"Declaraci\u00f3n de intenciones"},{"location":"#proyecto-de-documentacion","text":"Un espacio colaborativo para la banda de Koders, con el objetivo de ayudarnos a seguir mejorando. \ud83d\udcaa\ud83c\udffb Se pretende, pero no se lim\u00edta a : Notas/apuntes (que solo Dios y quien lo escribi\u00f3 entiende) Tips (En mejora, osea lo \u00fanico que nos jalo) Pepitas de oro (Links de webs ) \ud83d\ude4c\ud83c\udffb","title":"Proyecto de documentaci\u00f3n"},{"location":"colaborar/","text":"Requirements MkDocs requires a recent version of Python and the Python package manager, pip, to be installed on your system. You can check if you already have these installed from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) Installation Installing pip If you're using a recent version of Python, the Python package manager, pip, is most likely installed by default. However, you may need to upgrade pip to the lasted version: $ pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: $ python get-pip.py Installing MkDocs Install the mkdocs package using pip. To install MkDocs, run the following command from the command line: $ pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8) \u00bfC\u00f3mo colaborar? Clonate el repo: SSH: git@github.com:sergio-gonzalez-sainz/apuntes-kodemia.git Crea una carpeta en tu equipo. Entra a la carpeta en tu terminal. 2.2 Posicionado en la carpeta que creaste (en tu terminal), copia lo siguiente: git clone git@github.com:sergio-gonzalez-sainz/apuntes-kodemia.git Crea una rama: git branch nombreDeTuRama Cambiate a tu rama: git switch nombreDeTuRama Puede que si tienes una versi\u00f3n de git menor a 2.25.0 (para revisar la versi\u00f3n utiliza git --version ) no reconozca el switch , para ese caso puedes usar: git checkout nombreDeTuRama Para visualizar el sitio debes levantar un peque\u00f1o servicio con el siguiente comando: mkdocs serve Te debe levantar el sitio en http://127.0.0.1:8000/ . Para este punto ya puedes empezar a editar la documentaci\u00f3n en tu editor de texto favorito. Estar\u00eda chido que ingresaras a los siguientes sitios: Ac\u00e1 aprender\u00e1s la sint\u00e1xis b\u00e1sica para escibir: Markdown Aqui un cont\u00e9xto de que es MKdocs , que es con lo que esta hecha esta documentaci\u00f3n Cuando termines se hacer tu aportaci\u00f3n, guarda tus cambios y en terminal realiza un push : git push --set-upstream origin nombreDeTuRama Ve a GitHub y crea un Pullrequest","title":"\u00bfC\u00f3mo colaborar?"},{"location":"colaborar/#requirements","text":"MkDocs requires a recent version of Python and the Python package manager, pip, to be installed on your system. You can check if you already have these installed from the command line: $ python --version Python 3.8.2 $ pip --version pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8)","title":"Requirements"},{"location":"colaborar/#installation","text":"","title":"Installation"},{"location":"colaborar/#installing-pip","text":"If you're using a recent version of Python, the Python package manager, pip, is most likely installed by default. However, you may need to upgrade pip to the lasted version: $ pip install --upgrade pip If you need to install pip for the first time, download get-pip.py . Then run the following command to install it: $ python get-pip.py","title":"Installing pip"},{"location":"colaborar/#installing-mkdocs","text":"Install the mkdocs package using pip. To install MkDocs, run the following command from the command line: $ pip install mkdocs You should now have the mkdocs command installed on your system. Run mkdocs --version to check that everything worked okay. $ mkdocs --version mkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8)","title":"Installing MkDocs"},{"location":"colaborar/#como-colaborar","text":"Clonate el repo: SSH: git@github.com:sergio-gonzalez-sainz/apuntes-kodemia.git Crea una carpeta en tu equipo. Entra a la carpeta en tu terminal. 2.2 Posicionado en la carpeta que creaste (en tu terminal), copia lo siguiente: git clone git@github.com:sergio-gonzalez-sainz/apuntes-kodemia.git Crea una rama: git branch nombreDeTuRama Cambiate a tu rama: git switch nombreDeTuRama Puede que si tienes una versi\u00f3n de git menor a 2.25.0 (para revisar la versi\u00f3n utiliza git --version ) no reconozca el switch , para ese caso puedes usar: git checkout nombreDeTuRama Para visualizar el sitio debes levantar un peque\u00f1o servicio con el siguiente comando: mkdocs serve Te debe levantar el sitio en http://127.0.0.1:8000/ . Para este punto ya puedes empezar a editar la documentaci\u00f3n en tu editor de texto favorito. Estar\u00eda chido que ingresaras a los siguientes sitios: Ac\u00e1 aprender\u00e1s la sint\u00e1xis b\u00e1sica para escibir: Markdown Aqui un cont\u00e9xto de que es MKdocs , que es con lo que esta hecha esta documentaci\u00f3n Cuando termines se hacer tu aportaci\u00f3n, guarda tus cambios y en terminal realiza un push : git push --set-upstream origin nombreDeTuRama Ve a GitHub y crea un Pullrequest","title":"\u00bfC\u00f3mo colaborar?"},{"location":"git/","text":"Taller de Git y GitHub Git nos va a ayudar a darle un seguimiento espec\u00edfico a archivos. Nos permite administrar los cambios por archivo. Responde a: * \u00bfQuien hizo el cambio? * \u00bfCuando hizo el cambio? Al final Git es un sistema de control de versiones sobre un archivo o un conjunto de archivos a lo largo del tiempo. VCS - Version Control System Git es para registral los cambios de manera at\u00f3mica. Versionamiento \u00bfQue es Git? SCV distribuido. Pensando en la eficienciaa y confiabilidad del mantenimiento de las versiones del proyecto con muchos archivos. Optimizado para guardad todos los cambios de manera at\u00f3mica e incremiental. Mas eficiente con archivos de texto plano, que con binarios.Quiere decir que no puede trabajar de manera optima con pdf o archivos codificados. Conceptos Base Directorio Git Directorio .git . Repositorio local donde se almacenan los metadatos y la base de datos. Este directorio es el que se clona entre computadoras. Stagin area Archivo que define el staging AREA. Antesala donde van a esperar mis cambios. Almacena informaci\u00f3n acerca de lo que ca a ir en la pr\u00f3xima confirmacion. (commit). PWD - present working directory Git init - nos permite inicializar un repositorio. Git add - es para darle seguimiento al un archivo en especifico. git add sirve para pasarlo al staging area Si quiere eliminarlos del staging area se utiliza ``git rm --cached`` git config --local git commit -m \"version 1\" env\u00eda los \u00faltimos cambios registrados a la base del sistema de versionamineto. La opci\u00f3n -m permite colocar un \"\"nombre\" a este registro. git status : nos revela los \u00faltimos cambios. git rm --cached miArchivo : nos quita los archivos. git show :nos va a mostrar el cambio que se ha commiteado. git show miArchivo : me va a mostrar la comparaci\u00f3n de git diff id-1 id-2 git log : Nos va a mostrar el historico completo de cambios. Descargamos Starship Primero se descargan las fuentes Luego se ejecuta un comando sh -c \"$(curl -fsSL https://starship.rs/install.sh)\" Luego se intala el archivo de HomeBrew brew install starship git checkout : Sirve para cambiarme a un commit en un momento en el tiempo. Para commit especificos git switch : se hace sobre una rama. y siempre nos va a llevar al presente de la rama. gitignore : el git ignore, ayuda a que cuando se suba al reporsitorio ignore especificos archivos o Lo que hacemos es que creamos un archivo llamado .gitignore y en ese archivo ponemos todo lo que deseamos ignorar, archivos y carpetas. Trabajo colaborativo Repositorio remoto, para trabajar en un proyecto remoto le damos clic git clone URL Cuando se hace un git clone, ya no es necesario hacer un git init ya que ya tenemos una carpeta .git git push : Es lo que voy a utilizar para subir lo que tengo commiteado al repositorio remoto Claves de encriptacion La comunicaci\u00f3n con GitHub y mi computadora se tieen que hacer de manera cifrada, para eso se utiliza una llave p\u00fablica y una privada. Esto se hace cada que se cambia de equipo. Se genera una llave, para ello abrimos terminal y ssh-keygen -t ed255119 -C \"miCorreo\" eval \"$(ssh-agent -s)\" Cuando se le da enter se les tiene qu aparecer el Pid agent se tiene que crear un archivo de .config para eso se hace con nano y \"config\" Reporitio en GitHub Se copia el ssh y se va a la terminal git remote add origin URL El \"origin\" se llama Alias. para confirmar que esta todo bien se hace git remote o git remote -v Ya que se configuro, se puede hacer push. Cuando ya tenemos un repositorio para hacer push se hace lo siguinte: git push --set-upstream origin master Para sabes si esta actualiza pongo git fetch y luego hacemos git status y si la queremos actulizar hacemos un git pull Trabajo colaborativo en GitHub git clone <ssh link> git branch <rama> git switch <rama> Editar archivo $git add . git commit -m \"texto\" git push --set-upstream origin < nombre de mi rama> Ir a GitHub y crear pull request Si hay conflictos Cambiar a main/master git switch main git pull git marge main Hacemos los cambios git push --set-upstream origin Ir a github y crear pull request","title":"Git y Github"},{"location":"git/#taller-de-git-y-github","text":"Git nos va a ayudar a darle un seguimiento espec\u00edfico a archivos. Nos permite administrar los cambios por archivo. Responde a: * \u00bfQuien hizo el cambio? * \u00bfCuando hizo el cambio? Al final Git es un sistema de control de versiones sobre un archivo o un conjunto de archivos a lo largo del tiempo. VCS - Version Control System Git es para registral los cambios de manera at\u00f3mica.","title":"Taller de Git y GitHub"},{"location":"git/#versionamiento","text":"","title":"Versionamiento"},{"location":"git/#que-es-git","text":"SCV distribuido. Pensando en la eficienciaa y confiabilidad del mantenimiento de las versiones del proyecto con muchos archivos. Optimizado para guardad todos los cambios de manera at\u00f3mica e incremiental. Mas eficiente con archivos de texto plano, que con binarios.Quiere decir que no puede trabajar de manera optima con pdf o archivos codificados.","title":"\u00bfQue es Git?"},{"location":"git/#conceptos-base","text":"","title":"Conceptos Base"},{"location":"git/#directorio-git","text":"Directorio .git . Repositorio local donde se almacenan los metadatos y la base de datos. Este directorio es el que se clona entre computadoras.","title":"Directorio Git"},{"location":"git/#stagin-area","text":"Archivo que define el staging AREA. Antesala donde van a esperar mis cambios. Almacena informaci\u00f3n acerca de lo que ca a ir en la pr\u00f3xima confirmacion. (commit). PWD - present working directory Git init - nos permite inicializar un repositorio. Git add - es para darle seguimiento al un archivo en especifico. git add sirve para pasarlo al staging area Si quiere eliminarlos del staging area se utiliza ``git rm --cached`` git config --local git commit -m \"version 1\" env\u00eda los \u00faltimos cambios registrados a la base del sistema de versionamineto. La opci\u00f3n -m permite colocar un \"\"nombre\" a este registro. git status : nos revela los \u00faltimos cambios. git rm --cached miArchivo : nos quita los archivos. git show :nos va a mostrar el cambio que se ha commiteado. git show miArchivo : me va a mostrar la comparaci\u00f3n de git diff id-1 id-2 git log : Nos va a mostrar el historico completo de cambios. Descargamos Starship Primero se descargan las fuentes Luego se ejecuta un comando sh -c \"$(curl -fsSL https://starship.rs/install.sh)\" Luego se intala el archivo de HomeBrew brew install starship git checkout : Sirve para cambiarme a un commit en un momento en el tiempo. Para commit especificos git switch : se hace sobre una rama. y siempre nos va a llevar al presente de la rama. gitignore : el git ignore, ayuda a que cuando se suba al reporsitorio ignore especificos archivos o Lo que hacemos es que creamos un archivo llamado .gitignore y en ese archivo ponemos todo lo que deseamos ignorar, archivos y carpetas.","title":"Stagin area"},{"location":"git/#trabajo-colaborativo","text":"Repositorio remoto, para trabajar en un proyecto remoto le damos clic git clone URL Cuando se hace un git clone, ya no es necesario hacer un git init ya que ya tenemos una carpeta .git git push : Es lo que voy a utilizar para subir lo que tengo commiteado al repositorio remoto","title":"Trabajo colaborativo"},{"location":"git/#claves-de-encriptacion","text":"La comunicaci\u00f3n con GitHub y mi computadora se tieen que hacer de manera cifrada, para eso se utiliza una llave p\u00fablica y una privada. Esto se hace cada que se cambia de equipo. Se genera una llave, para ello abrimos terminal y ssh-keygen -t ed255119 -C \"miCorreo\" eval \"$(ssh-agent -s)\" Cuando se le da enter se les tiene qu aparecer el Pid agent se tiene que crear un archivo de .config para eso se hace con nano y \"config\"","title":"Claves de encriptacion"},{"location":"git/#reporitio-en-github","text":"Se copia el ssh y se va a la terminal git remote add origin URL El \"origin\" se llama Alias. para confirmar que esta todo bien se hace git remote o git remote -v Ya que se configuro, se puede hacer push. Cuando ya tenemos un repositorio para hacer push se hace lo siguinte: git push --set-upstream origin master Para sabes si esta actualiza pongo git fetch y luego hacemos git status y si la queremos actulizar hacemos un git pull","title":"Reporitio en GitHub"},{"location":"git/#trabajo-colaborativo-en-github","text":"git clone <ssh link> git branch <rama> git switch <rama> Editar archivo $git add . git commit -m \"texto\" git push --set-upstream origin < nombre de mi rama> Ir a GitHub y crear pull request","title":"Trabajo colaborativo en GitHub"},{"location":"git/#si-hay-conflictos","text":"Cambiar a main/master git switch main git pull git marge main Hacemos los cambios git push --set-upstream origin Ir a github y crear pull request","title":"Si hay conflictos"},{"location":"linux/","text":"","title":"Linux"},{"location":"maquetado/","text":"","title":"Maquetado"},{"location":"syntax/","text":"Basics commands. Markdown syntax is a lighweight markup language for creating formatted text. John Gruber and Aaron Swartz created Markdown in 2004. Titles Heading level 1 Syntax: # Heading level 1 Heading level 2 Syntax: ## Heading level 2 Heading level 3 Syntax: #### Heading level 3 Heading level 4 Syntax: ##### Heading level 4 Heading level 5 Syntax: ##### Heading level 5 Heading level 6 Syntax: ###### Heading level 6 Bold This is a paragraph with bold character . The sistax is: ** Your Text ** Italic This is a paragraph with italic character . The sistax is: * Your Text * Bold and Italic This is a paragraph with bold character . The sistax is: *** Your Text *** Order List You need to write a some number with one dot Item 1 Item 2 Unorder List Sintax: * Item 1 or - Item 1 or + Item 1 Item 1 Item 2 Images Sintax: ![Gato](./gato-risa.jpeg) . Tables To add a table, use three or more hypherns --- to create each column\u00b4s header. Use pipes | to separate each column. Syntax: | Syntax | Description | | --- | --- | | Header | Title | | Paragraph 1 | Text 1 | | Paragraph 2 | Text 2 | Render: Syntax Description Header Title Paragraph 1 Text 1 Paragraph 2 Text 2 Alignment Tables Syntax: | Syntax | Description | Test Text | | :--- | :---: | ---: | | Left Alignment | Center Alignment | Right Alignment | | Paragraph 1 | Text 1 | Text 1 | | Paragraph 2 | Text 2 | Text 2 | Render: Syntax Description Test Text Left Alignment Center Alignment Right Alignment Paragraph 1 Text 1 Text 1 Paragraph 2 Text 2 Text 2 Block of code If we can write a block of code like one Json. You need to write ``` at the begining and other ``` at the end. Syntax: ``` var myObject = { name = \"Sergio\", nameExample = \"Block of code\", GitHub = \"https://github.com/sergio-gonzalez-sainz\" } ``` Render: var myObject = { name = \"Sergio\", nameExample = \"Block of code\", GitHub = \"https://github.com/sergio-gonzalez-sainz\" }","title":"Markdown Syntax"},{"location":"syntax/#basics-commands","text":"Markdown syntax is a lighweight markup language for creating formatted text. John Gruber and Aaron Swartz created Markdown in 2004.","title":"Basics commands."},{"location":"syntax/#titles","text":"","title":"Titles"},{"location":"syntax/#heading-level-1","text":"Syntax: # Heading level 1","title":"Heading level 1"},{"location":"syntax/#heading-level-2","text":"Syntax: ## Heading level 2","title":"Heading level 2"},{"location":"syntax/#heading-level-3","text":"Syntax: #### Heading level 3","title":"Heading level 3"},{"location":"syntax/#heading-level-4","text":"Syntax: ##### Heading level 4","title":"Heading level 4"},{"location":"syntax/#heading-level-5","text":"Syntax: ##### Heading level 5","title":"Heading level 5"},{"location":"syntax/#heading-level-6","text":"Syntax: ###### Heading level 6","title":"Heading level 6"},{"location":"syntax/#bold","text":"This is a paragraph with bold character . The sistax is: ** Your Text **","title":"Bold"},{"location":"syntax/#italic","text":"This is a paragraph with italic character . The sistax is: * Your Text *","title":"Italic"},{"location":"syntax/#bold-and-italic","text":"This is a paragraph with bold character . The sistax is: *** Your Text ***","title":"Bold and Italic"},{"location":"syntax/#order-list","text":"You need to write a some number with one dot Item 1 Item 2","title":"Order List"},{"location":"syntax/#unorder-list","text":"Sintax: * Item 1 or - Item 1 or + Item 1 Item 1 Item 2","title":"Unorder List"},{"location":"syntax/#images","text":"Sintax: ![Gato](./gato-risa.jpeg) .","title":"Images"},{"location":"syntax/#tables","text":"To add a table, use three or more hypherns --- to create each column\u00b4s header. Use pipes | to separate each column.","title":"Tables"},{"location":"syntax/#syntax","text":"| Syntax | Description | | --- | --- | | Header | Title | | Paragraph 1 | Text 1 | | Paragraph 2 | Text 2 |","title":"Syntax:"},{"location":"syntax/#render","text":"Syntax Description Header Title Paragraph 1 Text 1 Paragraph 2 Text 2","title":"Render:"},{"location":"syntax/#alignment-tables","text":"","title":"Alignment Tables"},{"location":"syntax/#syntax_1","text":"| Syntax | Description | Test Text | | :--- | :---: | ---: | | Left Alignment | Center Alignment | Right Alignment | | Paragraph 1 | Text 1 | Text 1 | | Paragraph 2 | Text 2 | Text 2 |","title":"Syntax:"},{"location":"syntax/#render_1","text":"Syntax Description Test Text Left Alignment Center Alignment Right Alignment Paragraph 1 Text 1 Text 1 Paragraph 2 Text 2 Text 2","title":"Render:"},{"location":"syntax/#block-of-code","text":"If we can write a block of code like one Json. You need to write ``` at the begining and other ``` at the end.","title":"Block of code"},{"location":"syntax/#syntax_2","text":"``` var myObject = { name = \"Sergio\", nameExample = \"Block of code\", GitHub = \"https://github.com/sergio-gonzalez-sainz\" } ```","title":"Syntax:"},{"location":"syntax/#render_2","text":"var myObject = { name = \"Sergio\", nameExample = \"Block of code\", GitHub = \"https://github.com/sergio-gonzalez-sainz\" }","title":"Render:"}]}